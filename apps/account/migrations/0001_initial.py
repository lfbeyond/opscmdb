# Generated by Django 4.0.4 on 2023-05-24 03:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=60, verbose_name='名称')),
                ('desc', models.CharField(blank=True, max_length=150, null=True, verbose_name='描述')),
                ('type', models.CharField(choices=[('unit', '单位'), ('department', '部门')], default='department', max_length=20, verbose_name='类型')),
                ('manage', models.SmallIntegerField(blank=True, null=True, verbose_name='负责人')),
                ('mail_group', models.CharField(blank=True, max_length=200, null=True, verbose_name='邮件群组地址')),
                ('wechat_webhook_url', models.TextField(blank=True, null=True, verbose_name='企业微信群聊机器人WebHook')),
                ('dingding_webhook_url', models.TextField(blank=True, null=True, verbose_name='钉钉群聊机器人WebHook')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('arent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='account.structure', verbose_name='上级业务')),
            ],
            options={
                'verbose_name': '账户管理',
                'verbose_name_plural': '组织架构信息',
                'db_table': 'apulis_structure',
                'permissions': (('account_read_structure', '读取组织架构权限'), ('account_change_structure', '更改组织架构权限'), ('account_add_structure', '添加组织架构权限'), ('account_delete_structure', '删除组织架构权限')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='角色')),
                ('desc', models.CharField(blank=True, max_length=50, null=True, verbose_name='描述')),
                ('permissions', models.ManyToManyField(blank=True, to='auth.permission', verbose_name='角色权限')),
            ],
            options={
                'verbose_name': '账户管理',
                'verbose_name_plural': '角色信息',
                'db_table': 'apulis_role',
                'permissions': (('account_read_role', '读取角色权限'), ('account_change_role', '更改角色权限'), ('account_add_role', '添加角色权限'), ('account_delete_role', '删除角色权限')),
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=20, verbose_name='中文名字')),
                ('mobile', models.CharField(blank=True, default='', max_length=11, null=True, verbose_name='手机号码')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('avatar', models.FileField(blank=True, default='', null=True, upload_to='avatar/', verbose_name='个人头像')),
                ('post', models.CharField(blank=True, max_length=50, null=True, verbose_name='职位')),
                ('department', models.ManyToManyField(blank=True, to='account.structure', verbose_name='部门')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('roles', models.ManyToManyField(blank=True, to='account.role', verbose_name='角色')),
                ('superior', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='上级主管')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '账户管理',
                'verbose_name_plural': '用户表',
                'db_table': 'apulis_user',
                'ordering': ['id'],
                'permissions': (('account_read_user', '读取用户信息权限'), ('account_change_user', '更改用户信息权限'), ('account_add_user', '添加用户信息权限'), ('account_delete_user', '删除用户信息权限')),
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
